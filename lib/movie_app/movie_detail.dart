import 'package:flutter/material.dart';
import 'package:flutter_svg/svg.dart';
import 'package:training_newwave/configs/app_constant.dart';
import 'package:training_newwave/model/autogenerated_entity.dart';
import 'package:training_newwave/model/detail_movie_entity.dart';
import 'package:training_newwave/movie_app/networks/api_service.dart';

// ignore: must_be_immutable
class MovieDetail extends StatefulWidget {
  int id;

  MovieDetail({Key key, this.id}) : super(key: key);

  @override
  State<MovieDetail> createState() => _MovieDetailState();
}

class _MovieDetailState extends State<MovieDetail> {

  DetailMovie detailMovie;
  List<Cast> listCast = [];

  @override
  void initState() {
    super.initState();
    fetchDetail();
  }

  void fetchDetail() async {
    final result = await ApiService.fetchDetail(widget.id);
    final resultCast = await ApiService.fetchAutogenerated(widget.id);
    setState(
      () {
        detailMovie = result;
        listCast = resultCast.cast;
      },
    );
  }

  @override
  Widget build(BuildContext context) {
    WidgetsBinding.instance.addPostFrameCallback(
      (timeStamp) {
        showModalBottomSheet(
          context: context,
          isDismissible: false,
          elevation: 0,
          barrierColor: Colors.black.withAlpha(1),
          backgroundColor: Colors.transparent,
          shape: const RoundedRectangleBorder(
            borderRadius: BorderRadius.vertical(
              top: Radius.circular(40),
            ),
          ),
          clipBehavior: Clip.antiAliasWithSaveLayer,
          builder: (BuildContext context) {
            return detailMovie == null
                ? const SizedBox()
                : Container(
                    height: double.infinity,
                    decoration: const BoxDecoration(
                      color: Colors.red,
                      gradient: LinearGradient(
                        begin: Alignment.centerLeft,
                        end: Alignment.centerRight,
                        colors: <Color>[
                          Color(0xff2B5876),
                          Color(0xff4E4376),
                        ],
                        tileMode: TileMode.mirror,
                      ),
                    ),
                    child: Padding(
                      padding: const EdgeInsets.only(
                        left: 50,
                        right: 50,
                      ),
                      child: Column(
                        mainAxisAlignment: MainAxisAlignment.start,
                        crossAxisAlignment: CrossAxisAlignment.center,
                        children: [
                          Padding(
                            padding: const EdgeInsets.only(top: 10),
                            child: SvgPicture.asset(
                              "assets/svg/lane2.svg",
                              placeholderBuilder: (BuildContext context) =>
                              const CircularProgressIndicator(),
                            ),
                          ),
                          Text(
                            detailMovie.title,
                            maxLines: 1,
                            textAlign: TextAlign.center,
                            style: const TextStyle(
                              color: Colors.white,
                              fontSize: 64,
                              fontWeight: FontWeight.bold,
                            ),
                          ),
                          Text(
                            detailMovie.tagline,
                            style:  TextStyle(
                              color: const Color(0xffFFFFFF).withOpacity(0.5),
                              fontSize: 18,
                            ),
                          ),
                          Padding(
                            padding: const EdgeInsets.only(top: 27),
                            child: Row(
                              mainAxisAlignment: MainAxisAlignment.spaceBetween,
                              children: [
                                Row(
                                  mainAxisAlignment: MainAxisAlignment.start,
                                  children: [
                                    SvgPicture.asset(
                                      "assets/svg/action.svg",
                                      placeholderBuilder: (BuildContext context) =>
                                      const CircularProgressIndicator(),
                                    ),
                                    SvgPicture.asset(
                                      "assets/svg/imdb.svg",
                                      placeholderBuilder: (BuildContext context) =>
                                          const CircularProgressIndicator(),
                                    ),
                                  ],
                                ),
                                Row(
                                  mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                                  children: [
                                    SvgPicture.asset(
                                      "assets/svg/share.svg",
                                      placeholderBuilder: (BuildContext context) =>
                                          const CircularProgressIndicator(),
                                    ),
                                    Padding(
                                      padding: const EdgeInsets.only(left: 10),
                                      child: SvgPicture.asset(
                                        "assets/svg/Favorite.svg",
                                        placeholderBuilder: (BuildContext context) =>
                                            const CircularProgressIndicator(),
                                      ),
                                    ),
                                  ],
                                ),
                              ],
                            ),
                          ),
                          Padding(
                            padding: const EdgeInsets.only(top: 16),
                            child: Center(
                              child: Text(
                                detailMovie.overview,
                                maxLines: 3,
                                textAlign: TextAlign.start,
                                style:  TextStyle(
                                  color: const Color(0xffFFFFFF).withOpacity(0.75),
                                  fontSize: 12,
                                ),
                              ),
                            ),
                          ),
                          Padding(
                            padding: const EdgeInsets.only(top: 20),
                            child: Row(
                              mainAxisAlignment: MainAxisAlignment.spaceBetween,
                              crossAxisAlignment: CrossAxisAlignment.center,
                              children: const [
                                Text(
                                  "Cast",
                                  style: TextStyle(
                                    color: Colors.white,
                                    fontSize: 18,
                                    fontWeight: FontWeight.bold,
                                  ),
                                ),
                                Padding(
                                  padding: EdgeInsets.only(top: 6),
                                  child: Text(
                                    "See all",
                                    style: TextStyle(
                                      color: Colors.white,
                                      fontSize: 12,
                                    ),
                                  ),
                                ),
                              ],
                            ),
                          ),
                          Padding(
                            padding: const EdgeInsets.only(top: 16),
                            child: SizedBox(
                              height: 100,
                              child: ListView.separated(
                                itemCount: 5,
                                shrinkWrap: true,
                                scrollDirection: Axis.horizontal,
                                physics: const NeverScrollableScrollPhysics(),
                                separatorBuilder: (context, index) {
                                  return const SizedBox(width: 1);
                                },
                                itemBuilder: (context, index) {
                                  return SizedBox(
                                    child: itemCategory(
                                      listCast[index],
                                    ),
                                  );
                                },
                              ),
                            ),
                          ),
                        ],
                      ),
                    ),
                  );
          },
        );
      },
    );
    return detailMovie == null
        ? const SizedBox()
        : Container(
            width: MediaQuery.of(context).size.width,
            height: MediaQuery.of(context).size.height,
            decoration: BoxDecoration(
              image: DecorationImage(
                image: NetworkImage(
                  AppConstant.baseImage + detailMovie.posterPath,
                ),
                fit: BoxFit.fill,
              ),
            ),
            child: const SizedBox(// child: BottomSheetExample(),
                ),
          );
  }

  Widget itemCategory(Cast cast) {
    return SizedBox(
      width: 58,
      child: listCast.isEmpty ? const SizedBox() : Column(
        mainAxisAlignment: MainAxisAlignment.start,
        children: [
          ClipRRect(
            borderRadius: BorderRadius.circular(15),
            child: Image.network(
              AppConstant.baseImage+cast.profilePath,
              width: 50,
              height: 50,
              fit: BoxFit.cover,
            ),
          ),
          Padding(
            padding: const EdgeInsets.only(top: 8),
            child: Text(
              cast.name,
              maxLines: 2,
              textAlign: TextAlign.center,
              style: const TextStyle(
                color: Colors.white,
                fontSize: 8,
              ),
            ),
          ),
          Padding(
            padding: const EdgeInsets.only(top: 2),
            child: Text(
              cast.character,
              maxLines: 2,
              textAlign: TextAlign.center,
              style:  TextStyle(
                color: const Color(0xffFFFFFF).withOpacity(0.5),
                fontSize: 8,
              ),
            ),
          ),
        ],
      ),
    );
  }
}
